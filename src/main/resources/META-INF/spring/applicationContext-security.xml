<?xml version="1.0" encoding="UTF-8"?>
<beans:beans xmlns="http://www.springframework.org/schema/security"
  xmlns:beans="http://www.springframework.org/schema/beans" 
  xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
  xmlns:context="http://www.springframework.org/schema/context"  
  xsi:schemaLocation="http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-3.1.xsd
        http://www.springframework.org/schema/security http://www.springframework.org/schema/security/spring-security-3.1.xsd
        http://www.springframework.org/schema/context http://www.springframework.org/schema/context/spring-context-3.0.xsd">

 	<beans:bean id="Http403ForbiddenEntryPoint" class="org.springframework.security.web.authentication.Http403ForbiddenEntryPoint" />
<!--   <beans:bean id="entryPoint" class="org.springframework.security.web.authentication.DelegatingAuthenticationEntryPoint"> -->
<!-- 	  <beans:constructor-arg> -->
<!-- 	    <beans:map> -->
<!-- 	      <beans:entry key="hasHeader('X-Requested-With','XMLHttpRequest')" value-ref="Http403ForbiddenEntryPoint" /> -->
<!-- 	    </beans:map> -->
<!-- 	 </beans:constructor-arg> -->
<!--   <beans:property name="defaultEntryPoint"> -->
<!--     <beans:bean class="org.springframework.security.web.authentication.LoginUrlAuthenticationEntryPoint"> -->
<!--       <beans:constructor-arg value="/login" /> -->
<!--     </beans:bean> -->
<!--   </beans:property> -->
<!--  </beans:bean> -->
 <beans:bean id="authenticationEntryPoint" class="org.springframework.security.web.authentication.LoginUrlAuthenticationEntryPoint">
		<beans:property name="loginFormUrl" value="/openid_connect_login" />
	</beans:bean>
  
  <!-- wire mitre components -->
  <context:component-scan base-package="org.mitre.web" />
  <global-method-security pre-post-annotations="enabled" proxy-target-class="true" authentication-manager-ref="authenticationManager"/>
   
  <!-- HTTP security configurations -->
<!--   <http auto-config="true" use-expressions="true" entry-point-ref="entryPoint"> -->
<!--     <form-login login-processing-url="/resources/j_spring_security_check" -->
<!--       login-page="/login" authentication-failure-url="/login?login_error=t"/> -->
      
<!--     <openid-login login-processing-url="/resources/j_spring_openid_security_check" -->
<!--       login-page="/login" authentication-failure-url="/login?login_error=t"> -->
<!--       <attribute-exchange identifier-match="https://www.google.com/.*"> -->
<!--       	<openid-attribute name="email" type="http://schema.openid.net/contact/email" required="true" />      	 -->
<!--       </attribute-exchange> -->
<!--     </openid-login> -->
      
<!--     <logout logout-url="/resources/j_spring_security_logout" /> -->
<!--     Configure these elements to secure URIs in your application -->
<!--     <intercept-url pattern="/resources/**" access="permitAll" /> -->
<!--     <intercept-url pattern="/login" access="permitAll" /> -->
<!--     <intercept-url pattern="/**" access="isAuthenticated()" />     -->
<!--   </http> -->
	<http auto-config="false" use-expressions="true"
		disable-url-rewriting="true" entry-point-ref="authenticationEntryPoint" pattern="/**">

		<custom-filter before="PRE_AUTH_FILTER" ref="openIdConnectAuthenticationFilter" />

<!-- 		<logout /> -->
		<logout logout-url="/resources/j_spring_security_logout" />
<!--     Configure these elements to secure URIs in your application -->
    <intercept-url pattern="/resources/**" access="permitAll" />
    <intercept-url pattern="/login" access="permitAll" />
    <intercept-url pattern="/**" access="isAuthenticated()" />    

	</http>
  
  <!-- Configure Authentication mechanism -->
  <beans:bean id="customUserDetailsService" class="edu.dfci.cccb.gameon.security.service.DummyUserDetailsService"/>    
  <beans:bean id="authenitcationEventLoggerListener" class="edu.dfci.cccb.gameon.security.log.AuthenitcationEventLoggerListener" />
  <!-- beans:bean id="successHandler" class="edu.dfci.cccb.gameon.security.log.LogAuthenticationSuccessHandler"/-->
  
<!--   <authentication-manager alias="authenticationManager"> -->
    <!-- SHA-256 values can be produced using 'echo -n your_desired_password 
      | sha256sum' (using normal *nix environments) -->
<!--     <authentication-provider user-service-ref="customUserDetailsService"> -->
<!--       <password-encoder hash="sha-256" />       -->
<!--     </authentication-provider> -->
<!--     <authentication-provider> -->
<!--       <password-encoder hash="sha-256" /> -->
<!--       <user-service> -->
<!--         <user name="gameon" -->
<!--           password="8f347c17c1c55d72a07bbf82ea1c6e6b350aeb5036291d787d8fc8e49529e7b9" -->
<!--           authorities="ROLE_ADMIN" /> -->
<!--       </user-service> -->
<!--     </authentication-provider> -->
<!--   </authentication-manager> -->
	<authentication-manager alias="authenticationManager">
		<authentication-provider ref="openIdConnectAuthenticationProvider" />
<!--     <authentication-provider user-service-ref="customUserDetailsService"> -->
<!--       <password-encoder hash="sha-256" />       -->
<!--     </authentication-provider> -->
	</authentication-manager>
	<beans:bean id="openIdConnectAuthenticationProvider" class="org.mitre.openid.connect.client.OIDCAuthenticationProvider">
		<beans:property name="authoritiesMapper">
			<beans:bean class="org.mitre.openid.connect.client.NamedAdminAuthoritiesMapper">
<!-- 				<beans:property name="admins" ref="namedAdmins" /> -->
			</beans:bean>
		</beans:property>
	</beans:bean>
	<beans:bean id="openIdConnectAuthenticationFilter" class="org.mitre.openid.connect.client.OIDCAuthenticationFilter">
		<beans:property name="authenticationManager" ref="authenticationManager" />

		<beans:property name="issuerService" ref="hybridIssuerService" />
		<beans:property name="serverConfigurationService" ref="dynamicServerConfigurationService" />
		<beans:property name="clientConfigurationService" ref="staticClientConfigurationService" />
		<beans:property name="authRequestOptionsService" ref="staticAuthRequestOptionsService" />
		<beans:property name="authRequestUrlBuilder" ref="plainAuthRequestUrlBuilder" />
		
	</beans:bean>
	<!--
		Hybrid issuer service. If an issuer is passed in directly with the "iss" parameter, it will use that. If not, it will
		look for an "identifier" parameter to do Webfinger discovery on that. Failing that, it will redirect to the login
		page URL.
	-->
	<beans:bean class="org.mitre.openid.connect.client.service.impl.HybridIssuerService" id="hybridIssuerService">
		<beans:property name="loginPageUrl" value="login" />
	</beans:bean>
	<beans:bean class="org.mitre.openid.connect.client.service.impl.DynamicServerConfigurationService" id="dynamicServerConfigurationService" />
	<beans:bean class="org.mitre.openid.connect.client.service.impl.StaticClientConfigurationService" id="staticClientConfigurationService">
   <beans:property name="clients">
      <beans:map>
         <beans:entry key="https://accounts.google.com">
            <beans:bean class="org.mitre.oauth2.model.RegisteredClient">
               <beans:property name="clientName" value="cccb-gameon" />
               <beans:property name="clientId" value="502103739642-65lmisq7sgpflbpcam61rui5h0kl389t.apps.googleusercontent.com" />
               <beans:property name="clientSecret" value="nliCbW9cNi6nRHdgEbPbszD4" />
               <beans:property name="scope">
                  <beans:set value-type="java.lang.String">
<!--                      <beans:value>openid</beans:value> -->
                     <beans:value>email</beans:value>
<!--                      <beans:value>profile</beans:value> -->
                  </beans:set>
               </beans:property>
               <beans:property name="redirectUris">
                  <beans:set>
                     <beans:value>http://localhost:8080/gameon/openid_connect_login</beans:value>
                     <beans:value>http://localhost:8080/simple-web-app/openid_connect_login</beans:value>                     
                  </beans:set>
               </beans:property>
             </beans:bean>
         </beans:entry>
      </beans:map>
    </beans:property>
	</beans:bean>
	<!--
	  -
	  -	Auth request options service: returns the optional components of the request
	  - 
	  -->
	<beans:bean class="org.mitre.openid.connect.client.service.impl.StaticAuthRequestOptionsService" id="staticAuthRequestOptionsService">
		<beans:property name="options">
			<beans:map>
				<!-- Entries in this map are sent as key-value parameters to the auth request -->
				<!-- 
				<entry key="display" value="page" />
				<entry key="max_age" value="30" />
				<entry key="prompt" value="none" />
				-->
			</beans:map>
		</beans:property>
	</beans:bean>
	<!--
	  -
	  - Authorization URL Builders: create the URL to redirect the user to for authorization.
	  - 
	  -->

	<!--	
		Plain authorization request builder, puts all options as query parameters on the GET request
	-->
	<beans:bean class="org.mitre.openid.connect.client.service.impl.PlainAuthRequestUrlBuilder" id="plainAuthRequestUrlBuilder" />
	
		<!-- 
	 - 
	 - Utility beans for the above classes
	 -
	 -->

	<!-- 
		This service fetches and caches JWK sets from URLs.
	-->
	
	<beans:bean id="validatorCache" class="org.mitre.jwt.signer.service.impl.JWKSetCacheService" />
	
		<!-- 
		This service sets up a bunch of signers and validators based on our own keys.
		Replace this keystore's contents for a production deployment.
	 -->
	<beans:bean id="defaultSignerService" class="org.mitre.jwt.signer.service.impl.DefaultJwtSigningAndValidationService">
		<beans:constructor-arg name="keyStore">
			<beans:bean id="defaultKeyStore" class="org.mitre.jose.keystore.JWKSetKeyStore">
				<beans:property name="location" value="classpath:keystore.jwks" />
			</beans:bean>
		</beans:constructor-arg>
		<beans:property name="defaultSignerKeyId" value="rsa1" />
 		<beans:property name="defaultSigningAlgorithmName" value="RS256" />
	</beans:bean>
	
	<!-- 
		This service publishes the client's public key on a the endpoint "jwk" off the root of this client.
	-->	
	<beans:bean id="clientKeyPublisher" class="org.mitre.openid.connect.client.keypublisher.ClientKeyPublisher">
 		<beans:property name="jwkPublishUrl" value="jwk" />
 		<beans:property name="signingAndValidationService" ref="defaultSignerService" />
 	</beans:bean>
</beans:beans>
